name: 刷步数 Pro

permissions:
  contents: read

on:
  schedule:
    # UTC 23,4,12 -> 北京时 07:40 / 12:40 / 20:40
    - cron: '40 23,4,12 * * *'
  workflow_dispatch:

concurrency:
  group: mimotion
  cancel-in-progress: true

env:
  TZ: Asia/Shanghai
  DISABLE_DYNAMIC: ""
  FIXED_MIN: ""
  FIXED_MAX: ""

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install requests pytz

      - name: Build dynamic CONFIG (Beijing time slots)
        env:
          CONFIG: ${{ secrets.CONFIG }}
          DISABLE_DYNAMIC: ${{ env.DISABLE_DYNAMIC }}
          FIXED_MIN: ${{ env.FIXED_MIN }}
          FIXED_MAX: ${{ env.FIXED_MAX }}
        run: |
          python - << 'PY'
          import os, json
          from datetime import datetime
          import pytz

          raw = os.environ.get("CONFIG", "").strip()
          if not raw:
              print("::error::Missing secrets.CONFIG")
              raise SystemExit(1)

          try:
              cfg = json.loads(raw)
          except Exception as e:
              print("::error::CONFIG is not valid JSON:", e)
              raise SystemExit(1)

          fx_min = os.environ.get("FIXED_MIN", "").strip()
          fx_max = os.environ.get("FIXED_MAX", "").strip()
          force = fx_min.isdigit() and fx_max.isdigit()
          disable_dynamic = os.environ.get("DISABLE_DYNAMIC","").lower() in ("1","true","yes")

          now = datetime.now(pytz.timezone("Asia/Shanghai"))
          h = now.hour

          seg = None
          if   0 <= h <= 10: seg = (5000, 8000)
          elif 11 <= h <=16: seg = (12000, 18000)
          else:              seg = (19000, 26000)

          if force:
              mn, mx = int(fx_min), int(fx_max)
              reason = f"force-fixed {mn}-{mx}"
          elif disable_dynamic:
              mn, mx = int(cfg["MIN_STEP"]), int(cfg["MAX_STEP"])
              reason = f"keep-raw {mn}-{mx}"
          else:
              mn, mx = seg
              reason = f"auto-slot-{h:02d}h {mn}-{mx}"

          cfg["MIN_STEP"] = str(mn)
          cfg["MAX_STEP"] = str(mx)

          with open("merged_config.json", "w", encoding="utf-8") as f:
              json.dump(cfg, f, ensure_ascii=False, separators=(",",":"))

          summary = f"**Range**: {mn}-{mx}  |  **Mode**: {reason}\n"
          with open(os.environ.get("GITHUB_STEP_SUMMARY", "summary.md"), "a", encoding="utf-8") as s:
              s.write(summary)
          PY

      - name: Random jitter (0-600s)
        run: |
          JITTER=$((RANDOM % 600))
          echo "sleep ${JITTER}s to avoid burst..."
          sleep "${JITTER}s"

      - name: Run with retries (max 3)
        shell: bash
        run: |
          set +e
          export CONFIG="$(cat merged_config.json)"
          attempt=1
          max_attempts=3
          while true; do
            echo "==> attempt ${attempt}/${max_attempts}"
            python main.py
            rc=$?
            if [ $rc -eq 0 ]; then
              echo "run ok"
              break
            fi
            if [ $attempt -ge $max_attempts ]; then
              echo "::error::run failed after ${max_attempts} attempts (rc=${rc})"
              exit $rc
            fi
            backoff=$(( attempt * attempt * 10 + RANDOM % 7 ))
            echo "will retry after ${backoff}s..."
            sleep "${backoff}s"
            attempt=$((attempt+1))
          done
